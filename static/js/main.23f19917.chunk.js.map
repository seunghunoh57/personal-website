{"version":3,"sources":["resources/profile.jpg","resources/resume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","createExperience","experience","index","key","className","role","href","link","target","rel","company","term","state","experiences","src","profile","alt","id","this","map","exp","idx","resume","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,sOCsI5BC,EAjIf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAiDRC,iBAAmB,SAACC,EAAYC,GAC9B,OACE,wBAAIC,IAAKD,EAAOE,UAAU,cACxB,uBAAGA,UAAU,eACVH,EAAWI,KADd,KACsB,IACpB,uBACED,UAAU,WACVE,KAAML,EAAWM,KACjBC,OAAO,SACPC,IAAI,uBAEHR,EAAWS,UAGhB,uBAAGN,UAAU,YAAYH,EAAWU,QA9DxC,EAAKC,MAAQ,CACXC,YAAa,CACX,CACEH,QAAS,cACTL,KAAM,oBACNM,KAAM,qBACNJ,KAAM,2BAER,CACEG,QAAS,WACTL,KAAM,oBACNM,KAAM,qBACNJ,KAAM,0BAER,CACEG,QAAS,wBACTL,KAAM,qBACNM,KAAM,qBACNJ,KAAM,iCAER,CACEG,QAAS,eACTL,KAAM,2BACNM,KAAM,qBACNJ,KAAM,qBAER,CACEG,QAAS,aACTL,KAAM,2BACNM,KAAM,qBACNJ,KAAM,2BAER,CACEG,QAAS,iCACTL,KAAM,mBACNM,KAAM,qBACNJ,KAAM,+BAER,CACEG,QAAS,eACTL,KAAM,qBACNM,KAAM,qBACNJ,KAAM,+CA5CK,EADrB,sEAsEY,IAAD,OACP,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,yBACb,yBAAKU,IAAKC,IAASX,UAAU,eAAeY,IAAI,aAElD,yBAAKZ,UAAU,mBACb,uBAAGa,GAAG,QAAN,eACA,yBAAKb,UAAU,wBACb,uBAAGA,UAAU,SAAb,cACA,wBAAIA,UAAU,mBACXc,KAAKN,MAAMC,YAAYM,KAAI,SAACC,EAAKC,GAChC,OAAO,EAAKrB,iBAAiBoB,EAAKC,QAIxC,yBAAKjB,UAAU,cACb,uBAAGA,UAAU,gBAAb,YACA,uBACEA,UAAU,WACVE,KAAMgB,IACNd,OAAO,SACPC,IAAI,uBAJN,UAQA,uBACEL,UAAU,WACVE,KAAK,kCACLE,OAAO,SACPC,IAAI,uBAJN,UAQA,uBACEL,UAAU,WACVE,KAAK,qCACLE,OAAO,SACPC,IAAI,uBAJN,YAQA,uBACEL,UAAU,WACVE,KAAK,iCACLE,OAAO,SACPC,IAAI,uBAJN,iBAjHd,GAAyBc,IAAMC,WCOXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.23f19917.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.7d324c2c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/resume.9de9774a.pdf\";","import React from \"react\";\r\nimport \"./App.css\";\r\nimport profile from \"./resources/profile.jpg\";\r\nimport resume from \"./resources/resume.pdf\";\r\n\r\nexport class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      experiences: [\r\n        {\r\n          company: \"Wayfair LLC\",\r\n          role: \"Software Engineer\",\r\n          term: \"May '19 to Sep '19\",\r\n          link: \"https://www.wayfair.com\",\r\n        },\r\n        {\r\n          company: \"Raytheon\",\r\n          role: \"Software Engineer\",\r\n          term: \"Aug '18 to Mar '19\",\r\n          link: \"https://www.rtx.com/en\",\r\n        },\r\n        {\r\n          company: \"BU School of Medicine\",\r\n          role: \"Research Assistant\",\r\n          term: \"Feb '18 to May '18\",\r\n          link: \"https://www.bumc.bu.edu/busm/\",\r\n        },\r\n        {\r\n          company: \"AlzCare Labs\",\r\n          role: \"Software Engineer Intern\",\r\n          term: \"May '17 to Aug '17\",\r\n          link: \"https://alz.care/\",\r\n        },\r\n        {\r\n          company: \"Tallan Inc\",\r\n          role: \"Software Engineer Intern\",\r\n          term: \"May '16 to Aug '16\",\r\n          link: \"https://www.tallan.com/\",\r\n        },\r\n        {\r\n          company: \"BU Questrom School of Business\",\r\n          role: \"Student Employee\",\r\n          term: \"Sep '15 to Dec '17\",\r\n          link: \"http://www.bu.edu/questrom/\",\r\n        },\r\n        {\r\n          company: \"JEI Learning\",\r\n          role: \"Tutor & Instructor\",\r\n          term: \"Jul '15 to Aug '15\",\r\n          link: \"https://jeilearning.com/saratoga/index.do\",\r\n        },\r\n      ],\r\n    };\r\n  }\r\n\r\n  createExperience = (experience, index) => {\r\n    return (\r\n      <li key={index} className=\"experience\">\r\n        <p className=\"exp-company\">\r\n          {experience.role} |{\" \"}\r\n          <a\r\n            className=\"exp-link\"\r\n            href={experience.link}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {experience.company}\r\n          </a>\r\n        </p>\r\n        <p className=\"exp-term\">{experience.term}</p>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"App-fixed-picture-div\">\r\n            <img src={profile} className=\"App-portrait\" alt=\"profile\" />\r\n          </div>\r\n          <div className=\"App-content-div\">\r\n            <p id=\"name\">Seunghun Oh</p>\r\n            <div className=\"experience-container\">\r\n              <p className=\"title\">EXPERIENCE</p>\r\n              <ul className=\"experience-list\">\r\n                {this.state.experiences.map((exp, idx) => {\r\n                  return this.createExperience(exp, idx);\r\n                })}\r\n              </ul>\r\n            </div>\r\n            <div className=\"App-footer\">\r\n              <p className=\"footer-title\">CONTACTS</p>\r\n              <a\r\n                className=\"App-link\"\r\n                href={resume}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Resume\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://github.com/seunghunoh57\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Github\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://linkedin.com/in/seunghunoh\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Linkedin\r\n              </a>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"mailto:seunghun.oh57@gmail.com\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Email\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}